"Returns the transform component for 'entity' if it exists, or int2{?, 0} if there is none."
def get_transform_component(scene: H, entity: H) -> H

"Creates a new empty scene."
def new_scene() -> H

"Returns the global scene"
def global_scene() -> H

"Loads the model from the file into the given scene. Returns valid entity handle if attached==true"
def load_model(scene: H, fname: string, attach: bool) -> H

"Creates a new empty entity"
def create_entity() -> H

"Creates a name component for the given entity, and returns a the handle"
def create_name_component(scene: H, entity: H) -> H

"Sets the name for a name component."
def nc_set_name(name_comp: H, name: string)

"Searches scene for an entity by name. Returns INVALID_ENTITY if not found."
def find_entity_by_name(scene: H, name: string, ancestor_entity: H) -> H

"Logs to Wicked Engine backlog with given log level"
def backlog(level: int, msg: string)

"Creates a camera component on an entity."
def create_camera_component(scene: H, entity: H) -> H

"Creates a transform component on an entity"
def create_transform_component(scene: H, entity: H) -> H

"Returns the games RenderPath3d"
def get_renderpath3d() -> H

"Sets the camera component used by the 3d renderpath"
def renderpath3d_set_camera(rpath: H, cam_component: H)

"Tranlates transform by 'vec'"
def transform_translate(trans_component: H, v: float3)

"Rotates transform around given quaternion"
def transform_rotate(trans_component: H, quat: float4)

"Gets transform position"
def transform_position(tcomp: H) -> float3

"Gets transform rotation"
def transform_rotation(tcomp: H) -> float4

"Applies local space to world space matrix for transform"
def transform_update_transform(tcomp: H)

"Clears the transform component's transform."
def transform_clear(trans_comp: H)

"Apply euler rotation to transform"
def transform_rotate_roll_pitch_yaw(tcomp: H, angles: float3)

"Apply scale to transform"
def transform_scale(tcomp: H, scale: float3)

"Set this transform to be the linear interpolation of transforms 'a' and 'b'"
def transform_lerp(tcomp: H, a: H, b: H, t: float)


"Gets camera component fov"
def camera_fov(tcomp: H) -> float

"Sets camera component fov, in radians."
def camera_set_fov(tcomp: H, fov: float)

"Gets camera plane dims"
def camera_get_dims(tcomp: H) -> float2

"Sets camera plane dims"
def camera_set_dims(tcomp: H, dims: float2)

"Gets the camera zNear"
def camera_znear(tcomp: H) -> float

"Sets the camera zNear"
def camera_set_znear(tcomp: H, znear: float)

"Gets the camera zFar"
def camera_zfar(tcomp: H) -> float

"Sets the camera zFar"
def camera_set_zfar(tcomp: H, zfar: float)

"Gets the camera focal length"
def camera_focal_length(tcomp: H) -> float

"Sets the camera focal length"
def camera_set_focal_length(tcomp: H, l: float)

"Updates the camera transforms"
def camera_update(tcomp: H)

"Gets the camera component of an entity"
def get_camera_component(scene: H, ent: H) -> H



"Check if a button is down"
def input_down(button: int, playerindex: int) -> bool

"Check if a button is pressed once"
def input_press(button: int, playerindex: int) -> bool

"Check if a button is held down"
def input_hold(button: int, frames: int, continuous: bool, playerindex: int) -> bool

"get pointer position (eg. mouse pointer) (.xy) + scroll delta (.z) + pressure (.w)"
def input_get_pointer() -> float4

"sets pointer position"
def input_set_pointer(props: float4)

"Hides/shows pointer"
def input_hide_pointer(value: bool)

"Reads input from analog controller axis"
def input_get_analog(axis: int, playerindex: int) -> float4

